@page "/Users"

@using SimpleArchitecture.Services
@using SimpleArchitecture.Models.DomainModels
@using SimpleArchitecture.Blazor.ViewModel
@using SimpleArchitecture.Blazor.Extensions
@using SimpleArchitecture.Blazor.Components

@inject UserService userService

<h1>Current User List</h1>

<a href="/Users/Create" class="btn btn-success">Add New User</a>

<hr />

<SearchArea OnEnterPressed="NarrowResults">
    <MatTextField @bind-Value="@searchUserId" Label="Search User Id" />
    <MatTextField @bind-Value="@searchFullName" Label="Search Names" />
    <MatButton Icon="search" OnClick="NarrowResults" />
</SearchArea>

<MatTable Items="@Users" class="mat-elevation-z5">
    <MatTableHeader>
        <th>User Name</th>
        <th>Full Name</th>
        <th>Owner</th>
        <th></th>
    </MatTableHeader>
    <MatTableRow>
        <td style="width: 10%">@context.UserId</td>
        <td style="width: 20%">@context.FullName</td>
        <td style="width: 20%">@context.Owner</td>
        <td style="width: unset;">
            <MatButton Icon="visibility" Link="@($"/Users/View/{context.UserIdSeqNum}")">View MatBlazor</MatButton>
        </td>
    </MatTableRow>
</MatTable>

@code {
    private List<UserVM> Users;
    private IEnumerable<UserVM> AllUsers;

    public string searchUserId { get; set; }
    public string searchFullName { get; set; }

    protected override void OnInitialized()
    {
        AllUsers = userService.Find(new SimpleArchitecture.Models.Filters.UserFilter()).ToViewModel();
        Users = AllUsers.ToList();
    }

    private void NarrowResults()
    {
        IEnumerable<UserVM> FilteringUsers = AllUsers.AsEnumerable();

        if (!string.IsNullOrWhiteSpace(searchUserId))
        {
            FilteringUsers = FilteringUsers.Where(u => u.UserId.ToUpper().StartsWith(searchUserId.ToUpper()));
        }

        if (!string.IsNullOrWhiteSpace(searchFullName))
        {
            FilteringUsers = FilteringUsers.Where(u => u.FullName.ToUpper().Contains(searchFullName.ToUpper()));
        }

        Users = FilteringUsers.ToList();

        this.StateHasChanged();
    }
}
